service: webClient

variablesResolutionMode: 20210326

plugins:
  - serverless-certificate-creator
  - serverless-s3-deploy
  - serverless-s3-cleaner
  - serverless-scriptable-plugin
  - serverless-cloudfront-invalidate

package:
  patterns:
    - '!node_modules/**'
    - '!.serverless/**'
    - '!.build/**'

custom:
  project: awsTemplate
  baseName: ${self:custom.project}-${self:service}-${self:provider.stage}
  
  scriptHooks:
    after:aws:deploy:deploy:updateStack:
      - yarn run build

  assets:
    auto: true
    targets:
      - bucket: !Ref WebsiteBucket
        empty: true
        files:
          - source: build
            globs: '**/*'
  
  serverless-s3-cleaner:
    buckets:
      - ${cf:${self:custom.baseName}.ServerlessDeploymentBucketName, ''}
      - ${cf:${self:custom.baseName}.WebsiteBucketName, ''}

  cloudfrontInvalidate:
    - distributionIdKey: WebsiteDistributionId
      items:
        - "/*"

  domainName: ${ssm:/dns/domain/name}
  hostedZoneId: ${ssm:/dns/${custom:domainName}/hostedZoneId}

  customCertificate:
    certificateName: ${self:custom.domainName}
    hostedZoneIds: ${self:custom.hostedZoneId}
  certificateArn: ${certificate(${self:custom.customCertificate.certificateName}):CertificateArn}

provider:
  name: aws
  region: ${opt:stage, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  stackName: ${self:custom.baseName}
  runtime: nodejs14.x
  deploymentBucket:
    blockPublicAccess: true

resources:
  Resources:

    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
    
    
    WebsiteBucketCloudFrontAccessPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebsiteBucket
        PolicyDocument:
          Statement:
            - Action: s3:GetObject
              Effect: Allow
              Resource: !Sub '${WebsiteBucket.Arn}/*'
              Principal:
                CanonicalUser: !GetAtt WebsiteDistributionOAI.S3CanonicalUserId

    WebsiteDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: ${self:custom.baseName}-distribution
          Aliases:
            - ${self:custom.domainName}
          HttpVersion: http2
          Origins:
            - Id: exampleOrigin
              DomainName: !GetAtt WebsiteBucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${WebsiteDistributionOAI}'
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
              ErrorCachingMinTTL: 86400
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
              ErrorCachingMinTTL: 86400
          DefaultCacheBehavior:
          Compress: true
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # AWS managed policy, CachingOptimized
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # AWS managed policy, CORS-S3Origin
            TargetOriginId: exampleOrigin
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certificateArn}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021

    WebsiteDistributionOAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Sub 'Access ${WebsiteBucket} bucket'

    DnsRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        Name: ${self:custom.domainName}
        Comment: ${self:custom.baseName}-record
        HostedZoneId: ${self:custom.hostedZoneId}
        Type: A
        AliasTarget:
          DNSName: !GetAtt WebsiteDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2 # AWS managed, fixed value when source is Cloudfront

  Outputs:
    WebsiteBucketName:
      Value: !Ref WebsiteBucket

    WebsiteDistributionId:
      Value: !Ref WebsiteDistribution
